# coding: utf8

#################################################
#	Programme Python 2.7			#
#	auteur : Juan Piron, Kourou, 2017	#
#	licence : GPL				#
#	script : regexObjet.py			#
#################################################


############################################
#	importations de fonctions externes :

import getopt
import sys
import csv
import re
from netaddr import IPAddress
import socket

########################################
#	Définition locale de fonctions :

def maskConverter(mask):
	return IPAddress(mask).netmask_bits()


def header(foname, interName):
	###############################################
	#	Ecrire le header pour chaque interface :

	print("#################################################################")
	print("		Configuration du header de l'interface : "+interName)
	print("#################################################################\n")
	comment = raw_input("Veuillez entrer le \"comment\" du header : ")
	oFile = open(foname, "wb")
	try:
		oFile.write("header {\n\tcomment:: "+comment+"\n\n")
		oFile.write("\ttarget:: ciscoasa "+interName+"\n")
		oFile.write("}\n\n")
	finally:
		oFile.close()


def traitement():
	#################################
	#	Fonction principale

	# Définition des regexs
	aclRegex1 = r"^\['access-list',(.)*$"
	aclRegex2 = r"^\['access-list',(.)*'extended', 'deny'(.)*([0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{1,5})?([0-9]{1,3}\.){3}[0-9]{1,3}(:[0-9]{1,5})?'gt', '1023', 'host'(.)*$"
	remarkRegex = r"^\['access-list',(.)*'remark'(.)*$"
	iFile = open("showRun.csv", "rb")
	iNet = open("NETWORK.net", "rb")
	iSer = open("SERVICES.svc", "rb")

	try:
		lines = iFile.readlines()

		# test des différents cas et écriture des objets capirca dans les fichiers NETWORK.net et SERVICES.svc
		for i in range(0,len(lines)):
			line = lines[i].rstrip("\r\n")
			row = line.split(",")

			if re.match(aclRegex1,str(row)) is not None:
				interName = row[1]
				foname = interName+".pol"
				header(foname.replace("/", "_"), interName)
				oFile = open(foname.replace("/", "_"), "ab")
				oFile.write("term "+row[1]+" {\n")
				if re.match(remarkRegex,str(row)) is not None:
					oFile.write("comment:: "+str(row[2]).replace(" ","_")+"\n\n")
					oFile.close()
				if re.match(aclRegex2,str(row)) is not None:
					mask = maskConverter(row[5])
					oFile.write("source-address:: "+str(row[4])+"/"+str(mask)+"\n")
					oFile.write("source-port:: "+"1024-65access-list ICO-CORAIL extended deny tcp 132.149.7.128 255.255.255.128 gt 1023 host 132.149.174.180 eq https log 535\n")
					
					oFile.close()

	finally:
		iFile.close()
		iNet.close()
		iSer.close()
		oFile.close()


######################################
#	Corps principal du programme :

def main():
	# gestion des arguments
	opts, args = getopt.getopt(sys.argv[1:], "hi:o1:o2:", ["help", "input=", "output1=", "output2="])
	for o, a in opts:
		if o in ('-i', '--input'):
			finame=a
		if o in ('-o1', 'output1'):
			foname1=a
		if o in ('-o2', 'output2'):
			foname2=a
		elif o in ('-h', '--help'):
			print("--help (-h) : afficher l'aide")
			print("--input (-i) : fichier csv à traiter")
			print("--output1 (-o1) : fichier.net de destination")
			print("--output12 (-o2) : fichier.svc de destination")

	traitement()

if __name__ == "__main__":
    main()




def terms(finame):
	################################################
	#	Ecrire les terms de chaques interfaces :

	iFile = open(finame, "rb")
	interName = "none"
	try:
		reader = csv.DictReader(iFile)
		for row in reader:
			interListe = row["Interface"].split(" ")
			row["Interface"] = interListe[0]
			if row["Interface"] not in (interName):
				interName = row["Interface"]


			if row["Description"] in ('[]'):
				oFile.write("\tcomment:: WITHOUT-DESCRIPTION\n")
			else:
				cleanDes = row["Description"].replace("[","")
				cleanDes = cleanDes.replace("]","")
				oFile.write("\tcomment:: "+cleanDes+"\n")

			oFile.write("\tsource-address:: "+row["Source"]+"\n")
			#cleanServ = row["Service"].split("/")
			#oFile.write("\tprotocol:: "+cleanServ[0]+"\n")
			oFile.write("\tsource-port:: \n")
			oFile.write("\tdestination-address:: "+row["Destination"]+"\n")
			recupProtServ = services(row["Service"])
			oFile.write(recupProtServ)

			#oFile.write("\tdestination-port::")
			#for i in range(1,len(cleanServ)):
			#	oFile.write(" "+cleanServ[i])
			#oFile.write("/"+cleanServ[0]+"\n")

			if row["Action"] in ('Permit'):
				oFile.write("\taction:: accept\n}\n\n")
			elif row["Action"] in ('Deny'):
				oFile.write("\taction:: deny\n}\n\n")

			oFile.close()
	finally:
		iFile.close()
		oFile.close()


######################################
#	Corps principal du programme :

def main():
	opts, args = getopt.getopt(sys.argv[1:], "hi:o:t:", ["help", "input=", "output=", "type="])
	for o, a in opts:
		if o in ('-i', '--input'):
			finame=a
		if o in ('-o', 'output'):
			foname=a
		elif o in ('-h', '--help'):
			print("--help (-h) : afficher l'aide")
			print("--input (-i) : fichier csv à traiter")
			print("--output (-o) : fichier.asdm de destination")
		elif o in ('-t', '--type'):
			if a in ('ciscoasa'):
				type.append(a)
	terms(finame)

if __name__ == "__main__":
    main()
