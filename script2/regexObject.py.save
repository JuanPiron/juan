# coding: utf8

#################################################
#	Programme Python 2.7			#
#	auteur : Juan Piron, Kourou, 2017	#
#	licence : GPL				#
#	script : regexObjet.py			#
#################################################


############################################
#	importations de fonctions externes :

import getopt
import sys
import csv
import re
from netaddr import IPAddress
import socket

########################################
#	Définition locale de fonctions :

def maskConverter(mask):
	return IPAddress(mask).netmask_bits()


def traitement():
	#################################
	#	Fonction principale

	# Définition des regex
	netRegex1 = r"^\['object', 'network'(.)*$"
	netRegex2 = r"^\['host'(.)*$"
	netRegex3 = r"^\['subnet'(.)*$"
	netRegex4 = r"^\['range'(.)*$"
	serRegex1 = r"^\['object', 'service'(.)*$"
	serRegex2 = r"^\['service', ('tcp'|'udp')?, 'destination', 'eq'(.)*$"
	serRegex3 = r"^\['service', ('tcp'|'udp')?, 'destination', 'range'(.)*$"
	serRegex4 = r"^\['service', ('tcp'|'udp')?, 'source', 'eq'(.)*, 'destination', 'eq'(.)*$"
	serRegex5 = r"^\['service', ('tcp'|'udp')?, 'source', 'eq'(.)*, 'destination', 'range'(.)*$"
	serRege	serRegex5 = r"^\['service', ('tcp'|'udp')?, 'source', 'eq'(.)*, 'destination', 'range'(.)*$"
x5 = r"^\['service', ('tcp'|'udp')?, 'source', 'eq'(.)*, 'destination', 'range'(.)*$"
	iFile = open("showRun.csv", "rb")
	oFile1 = open("NETWORK.net", "wb")
	oFile2 = open("SERVICES.svc", "wb")
	try:
		reader = csv.reader(iFile)
		for row in reader:
			# test des différents cas et écriture des objets capirca dans les fichiers NETWORK.net et SERVICES.svc

			# cas : object network
			if re.match(netRegex1,str(row)) is not None:
				oFile1.write(row[2]+" = ")
				below = reader.next()
				if re.match(netRegex2,str(below)) is not None:
					oFile1.write(below[1]+"/32\n")
				elif re.match(netRegex3,str(below)) is not None:
					mask = maskConverter(below[2])
					oFile1.write(below[1]+"/"+str(mask)+"\n")
				elif re.match(netRegex4, str(below)) is not None:
					splitAddrLow = below[1].split(".")
					splitAddrUpp = below[2].split(".")
					lowRange = splitAddrLow[3]
					uppRange = splitAddrUpp[3]
					for i in range(int(lowRange),int(uppRange)):
						oFile1.write(splitAddrLow[0]+"."+splitAddrLow[1]+"."+splitAddrLow[2]+"."+str(i)+"\n")
			# cas : object service
			elif re.match(serRegex1,str(row)) is not None:
				below = reader.next()
				protocol = below[1]
				if re.match(serRegex2,str(below)) is not None:
					oFile2.write(row[2]+" = ")
					port = below[4]
					if not port.isdigit():
						port = socket.getservbyname(port,protocol)
						oFile2.write(str(port)+"/"+protocol+"\n")
					else:
						oFile2.write(port+"/"+protocol+"\n")
				if re.match(serRegex3,str(below)) is not None:
					oFile2.write(row[2]+" = ")
					portInf = below[4]
					portSup = below[5]
					if not portInf.isdigit() and not portSup.isdigit():
						portInf = socket.getservbyname(row[i+1],protocol)
						portSup = socket.getservbyname(row[i+2],protocol)
						oFile2.write(str(portInf)+"-"+str(portSup)+"/"+protocol+"\n")
					else:
						oFile2.write(portInf+"-"+portSup+"/"+protocol+"\n")
				if re.match(serRegex4,str(below)) is not None:
					# source
					oFile2.write(row[2]+"-source = ")
					port = below[4]
					if not port.isdigit():
						port = socket.getservbyname(port,protocol)
						oFile2.write(str(port)+"/"+protocol+"\n")
					else:
						oFile2.write(port+"/"+protocol+"\n")

					# destination
					oFile2.write(row[2]+"-dest = ")
					port = below[7]
					if not port.isdigit():
						port = socket.getservbyname(port,protocol)
						oFile2.write(str(port)+"/"+protocol+"\n")
					else:
						oFile2.write(port+"/"+protocol+"\n")


	finally:
		iFile.close()
		oFile1.close()
		oFile2.close()


######################################
#	Corps principal du programme :

def main():
	# gestion des arguments
	opts, args = getopt.getopt(sys.argv[1:], "hi:o1:o2:", ["help", "input=", "output1=", "output2="])
	for o, a in opts:
		if o in ('-i', '--input'):
			finame=a
		if o in ('-o1', 'output1'):
			foname1=a
		if o in ('-o2', 'output2'):
			foname2=a
		elif o in ('-h', '--help'):
			print("--help (-h) : afficher l'aide")
			print("--input (-i) : fichier csv à traiter")
			print("--output1 (-o1) : fichier.net de destination")
			print("--output12 (-o2) : fichier.svc de destination")

	traitement()

if __name__ == "__main__":
    main()
